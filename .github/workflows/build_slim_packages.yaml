name: Build slim packages

concurrency:
  group: slim-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
      - release-50
  pull_request:
    # GitHub pull_request action is by default triggered when
    # opened reopened or synchronize,
    # we add labeled and unlabeled to the list because
    # the mac job dpends on the PR having a 'Mac' label
    types:
      - labeled
      - unlabeled
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  linux:
    runs-on: aws-amd64

    strategy:
      fail-fast: false
      matrix:
        profile:
          - ["emqx", "24.3.4.2-3", "el7", "erlang"]
          - ["emqx", "25.1.2-3", "ubuntu22.04", "elixir"]
          - ["emqx-enterprise", "24.3.4.2-3", "amzn2", "erlang"]
          - ["emqx-enterprise", "25.1.2-3", "ubuntu20.04", "erlang"]
        builder:
          - 5.0-35
        elixir:
          - '1.13.4'

    container: "ghcr.io/emqx/emqx-builder/${{ matrix.builder }}:${{ matrix.elixir }}-${{ matrix.profile[1] }}-${{ matrix.profile[2] }}"

    steps:
    - uses: AutoModality/action-clean@v1
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: prepare
      run: |
        echo "EMQX_NAME=${{ matrix.profile[0] }}" >> $GITHUB_ENV
        echo "CODE_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
    - name: Work around https://github.com/actions/checkout/issues/766
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
    - name: build and test tgz package
      if: matrix.profile[3] == 'erlang'
      run: |
        make ${EMQX_NAME}-tgz
        ./scripts/pkg-tests.sh ${EMQX_NAME}-tgz
    - name: build and test deb/rpm packages
      if: matrix.profile[3] == 'erlang'
      run: |
        make ${EMQX_NAME}-pkg
        ./scripts/pkg-tests.sh ${EMQX_NAME}-pkg
    - name: build and test tgz package (Elixir)
      if: matrix.profile[3] == 'elixir'
      run: |
        make ${EMQX_NAME}-elixir-tgz
        ./scripts/pkg-tests.sh ${EMQX_NAME}-elixir-tgz
    - name: build and test deb/rpm packages (Elixir)
      if: matrix.profile[3] == 'elixir'
      run: |
        make ${EMQX_NAME}-elixir-pkg
        ./scripts/pkg-tests.sh ${EMQX_NAME}-elixir-pkg
    - uses: actions/upload-artifact@v3
      with:
        name: "${{ matrix.profile[0] }}-${{ matrix.profile[1] }}-${{ matrix.profile[2] }}"
        path: _packages/${{ matrix.profile[0] }}/*
    - uses: actions/upload-artifact@v3
      with:
        name: "${{ matrix.profile[0] }}_schema_dump"
        path: |
          scripts/spellcheck
          _build/docgen/${{ matrix.profile[0] }}/schema-en.json

  windows:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        profile:
          - emqx
        otp:
          - 25.1.2
    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1.12.0
    - uses: erlef/setup-beam@v1.15.2
      with:
        otp-version: ${{ matrix.otp }}
    - name: build
      env:
        PYTHON: python
        DIAGNOSTIC: 1
      run: |
        # ensure crypto app (openssl)
        erl -eval "erlang:display(crypto:info_lib())" -s init stop
        make ${{ matrix.profile }}-tgz
    - name: run emqx
      timeout-minutes: 5
      run: |
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx start
        Start-Sleep -s 5
        echo "EMQX started"
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx stop
        echo "EMQX stopped"
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx install
        echo "EMQX installed"
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx uninstall
        echo "EMQX uninstalled"
    - uses: actions/upload-artifact@v3
      with:
        name: windows
        path: _packages/${{ matrix.profile }}/*

  mac:
    strategy:
      fail-fast: false
      matrix:
        profile:
        - emqx
        - emqx-enterprise
        otp:
        - 24.3.4.2-3
        os:
        - macos-11
        - macos-12-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: prepare
      run: |
        echo "EMQX_NAME=${{ matrix.profile }}" >> $GITHUB_ENV
    - uses: ./.github/actions/package-macos
      with:
        profile: ${{ matrix.profile }}
        otp: ${{ matrix.otp }}
        os: ${{ matrix.os }}
        apple_id_password: ${{ secrets.APPLE_ID_PASSWORD }}
        apple_developer_identity: ${{ secrets.APPLE_DEVELOPER_IDENTITY }}
        apple_developer_id_bundle: ${{ secrets.APPLE_DEVELOPER_ID_BUNDLE }}
        apple_developer_id_bundle_password: ${{ secrets.APPLE_DEVELOPER_ID_BUNDLE_PASSWORD }}
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}
        path: _packages/**/*

  docker:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        profile:
          - ["emqx", "5.0.16"]
          - ["emqx-enterprise", "5.0.1"]

    steps:
    - uses: actions/checkout@v3
    - name: prepare
      run: |
        EMQX_NAME=${{ matrix.profile[0] }}
        PKG_VSN=${PKG_VSN:-$(./pkg-vsn.sh $EMQX_NAME)}
        EMQX_IMAGE_TAG=emqx/$EMQX_NAME:test
        EMQX_IMAGE_OLD_VERSION_TAG=emqx/$EMQX_NAME:${{ matrix.profile[1] }}
        echo "EMQX_NAME=$EMQX_NAME" >> $GITHUB_ENV
        echo "PKG_VSN=$PKG_VSN" >> $GITHUB_ENV
        echo "EMQX_IMAGE_TAG=$EMQX_IMAGE_TAG" >> $GITHUB_ENV
        echo "EMQX_IMAGE_OLD_VERSION_TAG=$EMQX_IMAGE_OLD_VERSION_TAG" >> $GITHUB_ENV
    - uses: docker/setup-buildx-action@v2
    - name: build and export to Docker
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deploy/docker/Dockerfile
        load: true
        tags: ${{ env.EMQX_IMAGE_TAG }}
        build-args: |
          EMQX_NAME=${{ env.EMQX_NAME }}
    - name: test docker image
      run: |
        CID=$(docker run -d --rm -P $EMQX_IMAGE_TAG)
        HTTP_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "18083/tcp") 0).HostPort}}' $CID)
        ./scripts/test/emqx-smoke-test.sh localhost $HTTP_PORT
        docker stop $CID
    - name: test two nodes cluster with proto_dist=inet_tls in docker
      run: |
        ./scripts/test/start-two-nodes-in-docker.sh -P $EMQX_IMAGE_TAG $EMQX_IMAGE_OLD_VERSION_TAG
        HTTP_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "18083/tcp") 0).HostPort}}' haproxy)
        ./scripts/test/emqx-smoke-test.sh localhost $HTTP_PORT
        # cleanup
        ./scripts/test/start-two-nodes-in-docker.sh -c
    - name: export docker image
      run: |
        docker save $EMQX_IMAGE_TAG | gzip > $EMQX_NAME-$PKG_VSN.tar.gz
    - uses: actions/upload-artifact@v3
      with:
        name: "${{ matrix.profile[0] }}-docker"
        path: "${{ env.EMQX_NAME }}-${{ env.PKG_VSN }}.tar.gz"

  spellcheck:
    needs: linux
    strategy:
      matrix:
        profile:
        - emqx
        - emqx-enterprise
    runs-on: aws-amd64
    steps:
    - uses: actions/download-artifact@v3
      name: Download schema dump
      with:
        name: "${{ matrix.profile }}_schema_dump"
        path: /tmp/
    - name: Run spellcheck
      run: |
        bash /tmp/scripts/spellcheck/spellcheck.sh /tmp/_build/docgen/${{ matrix.profile }}/schema-en.json
